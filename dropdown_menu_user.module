<?php

/**
 * @file
 * Build our own dropdown menu.
 */

/**
 * Implementation of hook_menu().
 */
/*function dropdown_menu_user_menu() {
  $items = array();

  $items['admin/config/people/dropdown_menu_user'] = array(
    'title' => 'Dropdown menu user settings',
    'description' => 'Administer dropdown menu user settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dropdown_menu_user_admin'),
    'access arguments' => array('Administer dropdown menu user'),
    'file' => 'dropdown_menu_user.admin.inc',
  );

  return $items;
}*/

/**
 * Implements hook_permission().
 */
/*function dropdown_menu_user_permission() {
  return array(
    'administer_dropdown_menu_user' => array(
      'title' => t('Administer dropdown menu user'),
      'description' => t('Administer dropdown menu user settings.'),
    ),
  );
}*/

/**
 * Implements hook_block_info().
 */
/*function dropdown_menu_user_block_info() {
  $block = array();

  $block['dropdown_menu_user_login_block'] = array(
    'info' => t('Dropdown menu user'),
    'visibility' => 'BLOCK_VISIBILITY_NOTLISTED',
    'pages' => 'user',
  );

  return $block;
}*/

/**
 * Implements of hook_theme().
 */
function dropdown_menu_user_theme() {
  return array(
    'dropdown_menu_user_logged_user' => array(
      'variables' => array(
        'user' => array('name', 'image'),
      ),
      'template' => 'dropdown_menu_user_logged_user',
    ),
    'dropdown_menu_user_login_block' => array(
      'variables' => array(
        'block_header' => '',
        'block_body' => '',
      ),
      'template' => 'dropdown_menu_user',
    ),
  );
}

/**
 * Implements hook_block_view().
 */
/*function dropdown_menu_user_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'dropdown_menu_user_login_block':
      module_load_include('inc', 'dropdown_menu_user');
      dropdown_menu_user_login_block_view($block);
      break;
  }

  return $block;
}*/

/**
 * Implements hook_form_alter().
 */
function dropdown_menu_user_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_block':
      global $language;

      // Check if we have to insert prefix in the form's action.
      if (!empty($language->prefix)) {
        $url = base_path() . $language->prefix . "/" . 'user';
      }
      else {
        $url = base_path() . 'user';
      }

      $form['#action'] = $url;
      $form['#method'] = 'post';
      $form['form_id'] = array(
        '#type' => 'hidden',
        '#default_value' => 'user_login',
      );

      // Link for recover password.
      $items[] = l(t('Request new password'), 'user/password', array(
        'attributes' => array(
          'title' => t('Request new password via e-mail.')
        )
      ));

      $form['links'] = array('#markup' => theme('item_list', array('items' => $items)));
      break;
  }
}
